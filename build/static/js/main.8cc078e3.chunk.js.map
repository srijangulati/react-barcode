{"version":3,"sources":["components/Scanner.js","components/Result.js","components/App.js","App.js","serviceWorker.js","index.js"],"names":["Scanner","_onDetected","result","console","log","_this","props","onDetected","react_default","a","createElement","id","className","Quagga","init","inputStream","type","constraints","width","height","facingMode","locator","patchSize","halfSample","numOfWorkers","decoder","readers","locate","err","start","this","offDetected","Component","Result","codeResult","code","format","App","state","scanning","results","_scan","setState","concat","onClick","map","index","Result_Result","key","Scanner_Scanner","react","App_App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAGqBA,6MAkDjBC,YAAY,SAACC,GACTC,QAAQC,IAAIF,GACZG,EAAKC,MAAMC,WAAWL,4EAjDtB,OACIM,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cAAcC,UAAU,yDAKpCC,IAAOC,KAAK,CACRC,YAAa,CACTC,KAAO,aACPC,YAAa,CACTC,MAAO,IACPC,OAAQ,IACRC,WAAY,gBAGpBC,QAAS,CACLC,UAAW,SACXC,YAAY,GAEhBC,aAAc,EACdC,QAAS,CACLC,QAAU,CAAC,kBACC,aACA,eACA,iBACA,qBACA,iBACA,aACA,eACA,iBAEhBC,QAAQ,GACT,SAASC,GACJA,EACAzB,QAAQC,IAAIwB,IAGhBzB,QAAQC,IAAI,2CACZS,IAAOgB,WAEXhB,IAAON,WAAWuB,KAAK7B,4DAIvBY,IAAOkB,YAAYD,KAAK7B,oBA/CK+B,aCDhBC,mLAEb,IAAM/B,EAAS4B,KAAKxB,MAAMJ,OAE1B,OAAKA,EAIDM,EAAAC,EAAAC,cAAA,UACCR,EAAOgC,WAAWC,KADnB,KAC2BjC,EAAOgC,WAAWE,OAD7C,KAHO,YALiBJ,aCEfK,6MACjBC,MAAQ,CACJC,UAAU,EACVC,QAAS,MAcbC,MAAM,WACFpC,EAAKqC,SAAS,CAACH,UAAWlC,EAAKiC,MAAMC,cAGzCtC,YAAY,SAACC,GACTC,QAAQC,IAAIF,GACZG,EAAKqC,SAAS,CAACF,QAASnC,EAAKiC,MAAME,QAAQG,OAAO,CAACzC,+EAjBnD,OACIM,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQkC,QAASd,KAAKW,OAAQX,KAAKQ,MAAMC,SAAW,OAAS,SAC7D/B,EAAAC,EAAAC,cAAA,MAAIE,UAAU,WACTkB,KAAKQ,MAAME,QAAQK,IAAI,SAAC3C,EAAO4C,GAAR,OAAmBtC,EAAAC,EAAAC,cAACqC,EAAD,CAAQC,IAAKF,EAAO5C,OAAQA,OAE1E4B,KAAKQ,MAAMC,SAAW/B,EAAAC,EAAAC,cAACuC,EAAD,CAAS1C,WAAYuB,KAAK7B,cAAiB,aAZjD+B,aCelBK,mLAbX,OACE7B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,8BAGAF,EAAAC,EAAAC,cAACwC,EAAA,SAAD,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,eARMnB,aCMEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8cc078e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Quagga from 'quagga';\n\nexport default class Scanner extends Component{\n\n    render() {\n        return (\n            <div id=\"interactive\" className=\"viewport\"/>\n        );\n    }\n\n    componentDidMount() {\n        Quagga.init({\n            inputStream: {\n                type : \"LiveStream\",\n                constraints: {\n                    width: 640,\n                    height: 480,\n                    facingMode: \"environment\" // or user\n                }\n            },\n            locator: {\n                patchSize: \"medium\",\n                halfSample: true\n            },\n            numOfWorkers: 0,\n            decoder: {\n                readers : [\"code_128_reader\",\n                            \"ean_reader\",\n                            \"ean_8_reader\",\n                            \"code_39_reader\",\n                            \"code_39_vin_reader\",\n                            \"codabar_reader\",\n                            \"upc_reader\",\n                            \"upc_e_reader\",\n                            \"i2of5_reader\"]\n            },\n            locate: true\n        }, function(err) {\n            if (err) {\n                console.log(err);\n                return;\n            }\n            console.log(\"Initialization finished. Ready to start\");\n            Quagga.start();\n        });\n        Quagga.onDetected(this._onDetected);\n    }\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected);\n    }\n\n    _onDetected=(result)=>{\n        console.log(result);\n        this.props.onDetected(result);\n    }\n}\n","import React, { Component } from 'react';\n\nexport default class Result extends Component{\n    render() {\n        const result = this.props.result;\n\n        if (!result) {\n            return null;\n        }\n        return (\n            <li>\n            {result.codeResult.code} [{result.codeResult.format}]\n            </li>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport Scanner from './Scanner';\nimport Result from './Result';\n\nexport default class App extends Component{\n    state = {\n        scanning: false,\n        results: []\n    }\n    render() {\n        return (\n            <div>\n                <button onClick={this._scan}>{this.state.scanning ? 'Stop' : 'Start'}</button>\n                <ul className=\"results\">\n                    {this.state.results.map((result,index) => (<Result key={index} result={result} />))}\n                </ul>\n                {this.state.scanning ? <Scanner onDetected={this._onDetected}/> : null}\n            </div>\n        );\n    }\n\n    _scan=()=>{\n        this.setState({scanning: !this.state.scanning});\n    }\n\n    _onDetected=(result)=>{\n        console.log(result);\n        this.setState({results: this.state.results.concat([result])});\n    }\n}\n","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport ReactScan from './components/App';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <p>\n            Scan your barcode\n          </p>\n          <Fragment>\n            <ReactScan />\n          </Fragment>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}